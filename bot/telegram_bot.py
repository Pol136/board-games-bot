from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup
from aiogram.types import Message
from aiogram.utils import executor
from aiogram.types import WebAppData
import json
import csv
from datetime import datetime

from config import API_TOKEN, ADMIN_ID
from main import bot, get_intent_ml

# from bot_logic import bot

# –°–æ–∑–¥–∞—ë–º –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä
bot_instance = Bot(token=API_TOKEN)
dp = Dispatcher(bot_instance)


def get_order_keyboard():
    keyboard = ReplyKeyboardMarkup(row_width=2)
    keyboard.add(
        types.KeyboardButton("–î–∞, –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑", web_app={'url': 'https://pol136.github.io/web_app_form/'}),
        types.KeyboardButton("–ù–µ—Ç", callback_data='cancel_order')
    )
    return keyboard


@dp.message_handler(commands=['start'])
async def start_handler(message: types.Message):
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ –ø–æ–¥–æ–±—Ä–∞—Ç—å –Ω–∞—Å—Ç–æ–ª—å–Ω—É—é –∏–≥—Ä—É üé≤\n\n"
        "–Ø —É–º–µ—é:\n"
        "‚Äî —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞—Ç—å –∏–≥—Ä—ã –ø–æ –∂–∞–Ω—Ä—É\n"
        "‚Äî —Ä–∞—Å—Å–∫–∞–∑—ã–≤–∞—Ç—å –ø—Ä–æ —Å—Ç–æ–∏–º–æ—Å—Ç—å\n"
        "‚Äî –æ—Ñ–æ—Ä–º–ª—è—Ç—å –∑–∞–∫–∞–∑\n"
        "‚Äî –∏—Å–∫–∞—Ç—å —Ñ–∞–∫—Ç—ã –≤ –í–∏–∫–∏–ø–µ–¥–∏–∏ (–Ω–∞–ø–∏—à–∏ `–≤–∏–∫–∏ –ö–∞—Ä–∫–∞—Å—Å–æ–Ω`)\n\n"
        "–ü–æ–ø—Ä–æ–±—É–π –∑–∞–¥–∞—Ç—å –º–Ω–µ –≤–æ–ø—Ä–æ—Å, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n"
        "üó£ ¬´–ü–æ—Å–æ–≤–µ—Ç—É–π –∏–≥—Ä—É –¥–ª—è –≤–µ—á–µ—Ä–∏–Ω–∫–∏¬ª"
    )


@dp.message_handler(commands=['help'])
async def help_handler(message: types.Message):
    await message.answer(
        "üìö –Ø –º–æ–≥—É:\n"
        "‚Äî –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –Ω–∞—Å—Ç–æ–ª—å–Ω—ã–µ –∏–≥—Ä—ã\n"
        "‚Äî –†–∞—Å—Å–∫–∞–∑–∞—Ç—å –ø—Ä–æ –ò–º–∞–¥–∂–∏–Ω–∞—Ä–∏—É–º, –ö–∞—Ä–∫–∞—Å—Å–æ–Ω, 7 —á—É–¥–µ—Å –∏ –¥—Ä—É–≥–∏–µ\n"
        "‚Äî –ù–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –í–∏–∫–∏–ø–µ–¥–∏–∏ (–µ—Å–ª–∏ —Ç—ã –Ω–∞–ø–∏—à–µ—à—å `–≤–∏–∫–∏ <—Ç–µ–º–∞>`)\n\n"
        "–ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø—Ä–æ—Å–æ–≤:\n"
        "üó® ¬´–ü–æ–º–æ–≥–∏ —Å –≤—ã–±–æ—Ä–æ–º –Ω–∞—Å—Ç–æ–ª—å–Ω–æ–π –∏–≥—Ä—ã¬ª\n"
        "üó® ¬´–°–µ–º–µ–π–Ω–∞—è –∏–≥—Ä–∞¬ª\n"
        "üó® ¬´–≤–∏–∫–∏ –ò–º–∞–¥–∂–∏–Ω–∞—Ä–∏—É–º¬ª\n\n"
        "–ï—Å–ª–∏ –Ω–µ –∑–Ω–∞–µ—à—å, —á—Ç–æ —Å–ø—Ä–æ—Å–∏—Ç—å ‚Äî –ø—Ä–æ—Å—Ç–æ –Ω–∞—á–Ω–∏ –¥–∏–∞–ª–æ–≥ üôÇ"
    )


@dp.message_handler(commands=["orders"])
async def show_user_orders(message: types.Message):
    user_id = int(message.from_user.id)
    try:
        with open("orders.csv", "r", encoding="utf-8") as f:
            reader = csv.reader(f)
            rows = [row for row in reader if int(row[1]) == user_id]

        if not rows:
            await message.answer("–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤ üòï")
            return

        response = "üì¶ –¢–≤–æ–∏ –∑–∞–∫–∞–∑—ã:\n\n"
        for row in rows:
            order_id, user_id, username, name, pickup, games, status, timestamp = row

            response += (
                f"üì¶ –ó–∞–∫–∞–∑ ‚Ññ{order_id} –æ—Ç {timestamp}\n"
                f"–ò–≥—Ä—ã: {games}\n"
                f"–ü—É–Ω–∫—Ç –≤—ã–¥–∞—á–∏: {pickup}\n"
                f"–°—Ç–∞—Ç—É—Å: {status}\n\n"
            )

        await message.answer(response.strip())

    except FileNotFoundError:
        await message.answer("–°–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤ –ø–æ–∫–∞ –ø—É—Å—Ç.")


@dp.message_handler(commands=["setstatus"])
async def set_status_handler(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        await message.answer("‚õî –£ —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return

    args = message.text.split(maxsplit=2)
    if len(args) < 3:
        await message.answer("‚ùó –ò—Å–ø–æ–ª—å–∑—É–π —Ñ–æ—Ä–º–∞—Ç: /setstatus <–Ω–æ–º–µ—Ä> <—Å—Ç–∞—Ç—É—Å>")
        return

    order_id, new_status = args[1], args[2]
    updated = False
    rows = []

    try:
        with open("orders.csv", "r", encoding="utf-8") as f:
            reader = csv.reader(f)
            rows = list(reader)

        for i in range(len(rows)):
            row = rows[i]
            if len(row) >= 8 and row[0].strip() == str(order_id).strip():
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
                row[6] = new_status
                updated = True

                # –ü–æ–ª—É—á–∞–µ–º user_id –∏ games
                user_id = int(row[1])
                games = row[5]

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—Ä–∞—Ç–Ω–æ
                rows[i] = row
                break

        if updated:
            with open("orders.csv", "w", encoding="utf-8", newline="") as f:
                writer = csv.writer(f)
                writer.writerows(rows)

            await message.answer(f"‚úÖ –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ ‚Ññ{order_id} –æ–±–Ω–æ–≤–ª—ë–Ω –Ω–∞: {new_status}")

            # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            try:
                await bot_instance.send_message(
                    user_id,
                    f"üì¶ –°—Ç–∞—Ç—É—Å —Ç–≤–æ–µ–≥–æ –∑–∞–∫–∞–∑–∞ ‚Ññ{order_id} –æ–±–Ω–æ–≤–ª—ë–Ω:\nüé≤ {games}\nüöö –ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å: {new_status}"
                )
            except Exception as e:
                print(e)
                await message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")

        else:
            await message.answer("‚ùå –ó–∞–∫–∞–∑ —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω.")

    except Exception as e:
        print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞:", e)
        await message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞.")



# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.message_handler()
async def handle_message(message: types.Message):
    user_text = message.text
    intent = get_intent_ml(user_text)

    if intent == "order_game":
        await message.answer(
            "–û—Ç–ª–∏—á–Ω—ã–π –≤—ã–±–æ—Ä! –•–æ—á–µ—à—å –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑?",
            reply_markup=get_order_keyboard()
        )
        return

    # –æ—Å—Ç–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞
    response = bot(user_text)
    await message.answer(response)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ –ù–µ—Ç –ø—Ä–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–∏ —Å–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑
@dp.callback_query_handler(lambda c: c.data == 'cancel_order')
async def cancel_order_callback(callback_query: types.CallbackQuery):
    await callback_query.answer()
    await callback_query.message.answer("–•–æ—Ä–æ—à–æ! –ï—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–µ—à—å ‚Äî —è –∑–¥–µ—Å—å üôÇ")


@dp.message_handler(content_types=types.ContentType.WEB_APP_DATA)
async def process_webapp_data(message: types.Message):
    try:
        data = json.loads(message.web_app_data.data)

        name = data.get("name")
        pickup = data.get("pickup")
        games = data.get("games", [])

        if not name or not games:
            await message.answer("‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏ –∏–º—è –∏ –≤—ã–±–µ—Ä–∏ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –∏–≥—Ä—É.")
            return

        status = "–≤ –ø—É—Ç–∏"
        user_id = str(message.from_user.id)
        username = message.from_user.username or "-"
        timestamp = datetime.now().strftime('%Y-%m-%d %H:%M:%S')

        # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä –Ω–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞ (–∏–Ω–¥–µ–∫—Å —Å—Ç—Ä–æ–∫–∏)
        try:
            with open("orders.csv", "r", encoding="utf-8") as f:
                order_id = sum(1 for _ in f)
        except FileNotFoundError:
            order_id = 1

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–∫–∞–∑
        with open("orders.csv", "a", encoding="utf-8", newline="") as f:
            writer = csv.writer(f)
            writer.writerow([
                order_id,
                user_id,
                username,
                name,
                pickup,
                ", ".join(games),
                status,
                timestamp
            ])

        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        text = f"‚úÖ –ó–∞–∫–∞–∑ ‚Ññ{order_id} –æ—Ñ–æ—Ä–º–ª–µ–Ω!\n\n" \
               f"üë§ –ò–º—è: {name}\n" \
               f"üì¶ –ü—É–Ω–∫—Ç –≤—ã–¥–∞—á–∏: {pickup}\n" \
               f"üé≤ –ò–≥—Ä—ã:\n" + '\n'.join(f"‚Äî {g}" for g in games) + f"\n\nüöö –°—Ç–∞—Ç—É—Å: {status}"

        await message.answer(text)

    except Exception as e:
        print("[–û—à–∏–±–∫–∞ WebApp]:", e)
        await message.answer("‚ö†Ô∏è –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞ üò¢")


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
